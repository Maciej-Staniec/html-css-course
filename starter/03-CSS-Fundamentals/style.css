/* The Universal selector doesn't involve inheritance. */
* {
  /* If we apply a property within the universal selector's declaration block, it gets applied to all html elements */
  /* border-bottom: 5px solid blue; */
  color: purple;

  /* It is extremely common to zero margin and padding to all elements on the page. Thanks that, it is much easier to style our web page. These declarations have least priority, so any declarations will overwrite them.*/
  margin: 0;
  padding: 0;
}

body {
  font-family: sans-serif;
  color: #555;

  /* Only certain properties get inherited by child elements of the body element */
  /* For example, the border property doesn't get inherited. */
  border-top: 10px solid #1098ad;
  /* For the most part, the inheritance involves text-related properties. */
  position: relative;
}

.container {
  width: 800px;
  /* When you set margin to auto, it means that the browser will figure out the appropriate width. */
  /* margin-left: auto;
  margin-right: auto; */
  margin: 0 auto;
}

/* Combining CSS selectors into a "list selector" */
/* h1,
h2,
h3,
h4,
p,
li {
  font-family: sans-serif;
  color: #555;
  The colour of h1, h2 and h3 gets overwritten in the next declaration block. In CSS always the last declaration/style is applied.
} */

h1,
h2,
h3 {
  color: #1098ad;
}

h1 {
  /* h1 is a selector */
  font-size: 26px;
  /* The 'font' property indicates desired size of the font. The specified size in pixels after the colon character is called a "value". The property-value pair is called declaration/style. */
  text-transform: uppercase;
  font-style: italic;
}
/* Everything declared between curly braces is also known as "declaration block" */
/* The entire thing including declaration block and a selector is known as a CSS rule. */

h2 {
  font-size: 40px;
  margin-bottom: 30px;
}

h3 {
  font-size: 30px;
}

h4 {
  font-size: 20px;
  text-transform: uppercase;
  text-align: center;
}

p {
  font-size: 22px;
  line-height: 1.5;
  /* The line-height property tells the browser that we want the height of each line 1.5 times bigger than the font size. */
  margin-bottom: 15px;
}

li {
  font-size: 20px;
  margin-bottom: 5px;
  /* display: inline; */
}

ul,
ol {
  margin-left: 50px;
  margin-bottom: 20px;
}

/* Pseudo classes */
li:first-child {
  font-weight: bold;
}

li:last-child {
  font-style: italic;
  margin-bottom: 0;
}

article {
  margin-bottom: 60px;
}

aside {
  /* The following 'border' property is also known as "shorthand property", because we can specify multiple different properties and their value in a single declaration/style. */
  /* border: 5px solid #1098ad; */

  /* Because we want to have borders only at the top and bottom of the 'aside' html element, we've got to explicitly specify these properties */
  border-top: 5px solid #1098ad;
  border-bottom: 5px solid #1098ad;
  padding-top: 50px;
  padding-bottom: 50px;
  width: 500px;
}

/* Combining selectors into a "descendant selector". */
/* Notice, there is a space character between selectors. What it actually does is it tells the browser to select all 'p' elements that are inside the 'footer' element. This is why it is called a descendant selector, because the 'p' element is a child of the 'footer' in the html file. */
footer p {
  font-size: 16px;
}

/* ID selectors */
/* To select id selectors, you need to preced their name using '#' character. */
/* ID names can only be used once in the html code. That means, that the "author" id can't be reused at any other html element. For grouping together specific elements using the same selector, we use 'class' selectors. */
/* In a real world we don't use id selectors. They are prone to errors. Imagine our project is getting bigger and bigger over time. We get the point, where we want to reuse a selector, but because we used an id selector, we've got to change it to the 'class' selector in the html file and css stylesheet. Elements can be easily overlooked and probability of syntax error also increases. Therefore, in the production environment always use class selectors not id, even if we use the 'class' selector only once in our html file. This makes our code ready for the future and potential changes.*/
#author {
  font-style: italic;
  font-size: 18px;
}

/* class selectors */
/* To select class selectors, they have to be preceded with '.' character. */
.related-author {
  font-size: 18px;
  font-weight: bold;
}

.related-posts {
  list-style: none;
}

/* aside ul {
  list-style: none;
} */

.main-header,
aside {
  background-color: #f5f5f5;
}
.main-header {
  padding: 20px 40px;
  /* When it comes to making vertical spaces between HTML elements, it's best to stick to one of the margin properties - either margin-top or margin-bottom. Do not use them interchangeably. */
  margin-bottom: 60px;
  /* height: 80px; */
}

.post-header {
  margin-bottom: 40px;
  position: relative;
}

.laura-jones {
  /* When it comes to using percentages to specify size of an image, it always refers to the width of the parent container. In this case, the parent of the laura jones image is the header html element. What is special about using percentages? Well, depending on the size of the display, the browser window can be different in size. The image will adjust its width and height automatically. This is very important if we want to create responsive webites - websites that adapt to the screen's width. */
  width: 10%;
  height: auto;
}

.post-image {
  width: 100%;
  /* Specifying height is only required if the height has been specified in the html.
  To keep the aspect ratio, we need to set its value to "auto". */
  height: auto;
}

/* li:nth-child(even) {
  color: red;
} */

/* Pseudo-classes work well only if the selector is first or last child element in the parent element. */

article p:last-child {
  color: blue;
}

/* Styling links using pseudo classes */

/* Styling unvisited link */
a:link {
  color: yellow;
  /* removing underline from hyperlinks */
  text-decoration: none;
}

/* Styling visited links with a pseudo class */
a:visited {
  color: #1098ad;
}

/* this pseudo class allows us to style elements and results can be seen when hovering over the element with a mouse cursor*/
a:hover {
  color: orangered;
  font-weight: bold;
  text-decoration: underline dotted green;
}

/* This psuedo class allows us to style elements and the result can be seen when an element gets clicked. */
a:active {
  background-color: black;
  font-style: italic;
}

/* The red font color is not applied to the element because the pseudo-class selector a:link has higher priority. */
/* a {
  color: red;
} */

/* CSS selectors priority */
#copyright {
  color: red;
}

.text {
  color: yellow;
}

.copyright {
  color: blue;
}

nav a:link {
  background-color: orangered;
  color: #1098ad;
  /* margin: 20px;
  padding: 20px;
  display: block; */
  margin-right: 30px;
  margin-top: 10px;
  display: inline-block;
}

nav a:link:last-child {
  margin-top: 0;
  margin-right: 0;
  display: inline;
}

/* Do not overuse the !important keyword for changing selectors priority. Use it only as a last resort and treat this as a hack. Always try to write simpler selectors. Utilise nested selectors only if necessary.*/
footer p {
  color: green !important;
}

button {
  font-size: 22px;
  padding: 20px;
  cursor: pointer;

  position: absolute;
  /* the position of the element on the page is by default based on relation to the viewport. We can indicate its position by setting different properties, ie., top, bottom, left, right.
  To stop our element from positioning based on relation to the the viewport, we need to change the "position" property of the parent's element selector to "relative". Thanks to that, we will be able to position our element anywhere we want within that parent element.
  
  Remember! - The element is going to position in relation to its closest parent element which has position property set to relative value. So, if the body element has position property set to relative value and the element with absolute value is inside other parent element which  isn't relatively positioned, the absolutely positioned element will position in relation to the body element. If the parent element would have position property set to relative value, then the absolutely positioned element would position in relation to this parent element, not the body element. The closest parent element always wins.
   */
  bottom: 50px;
  right: 50px;
}
